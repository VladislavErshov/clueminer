/*
 * Copyright (C) 2011-2016 clueminer.org
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.clueminer.flow;

import java.awt.GridBagConstraints;
import java.awt.Insets;
import org.clueminer.flow.api.FlowNode;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Top component which displays components available for data pipeline.
 */
@ConvertAsProperties(
        dtd = "-//org.clueminer.flow//Store//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "StoreTopComponent",
        iconBase = "org/clueminer/flow/node-store16.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "org.clueminer.flow.StoreTopComponent")
@ActionReference(path = "Menu/Window" /* , position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_StoreAction",
        preferredID = "StoreTopComponent"
)
@Messages({
    "CTL_StoreAction=Node Store",
    "CTL_StoreTopComponent=Node Store",
    "HINT_StoreTopComponent=Components for data pipeline"
})
public final class StoreTopComponent extends TopComponent implements ExplorerManager.Provider {

    private BeanTreeView treeView;
    private Lookup.Result<FlowNode> result = null;
    private static final Logger LOG = LoggerFactory.getLogger(StoreTopComponent.class);
    private AbstractNode root;
    private FlowNodes flowNodes;
    private final transient ExplorerManager mgr = new ExplorerManager();

    public StoreTopComponent() {
        initComponents();
        setName(Bundle.CTL_StoreTopComponent());
        setToolTipText(Bundle.HINT_StoreTopComponent());
        associateLookup(ExplorerUtils.createLookup(mgr, getActionMap()));
        init();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.GridBagLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        flowNodes = new FlowNodes();
        root = new AbstractNode(flowNodes);
        //root = new FlowContainerNode(flowNodes);
//        LOG.info("found {} flow nodes", flowNodes.getNodesCount());
        mgr.setRootContext(root);
    }

    @Override
    public void componentClosed() {

    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private void init() {
        treeView = new BeanTreeView();
        treeView.setRootVisible(false);
        GridBagConstraints c = new GridBagConstraints();
        c.anchor = GridBagConstraints.NORTHWEST;
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 0;
        c.gridy = 0;
        c.gridwidth = 1;
        c.gridheight = 1;
        c.weightx = 1.0;
        c.weighty = 1.0;
        c.insets = new Insets(0, 0, 0, 0);
        add(treeView, c);
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return mgr;
    }

}
