/*
 * Copyright (C) 2011-2017 clueminer.org
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.clueminer.processor.ui;

import java.awt.event.ItemEvent;
import org.clueminer.attributes.BasicAttrRole;
import org.clueminer.dataset.api.AttributeRole;
import org.clueminer.io.importer.api.AttributeDraft;
import org.clueminer.spi.ImporterUI;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author deric
 */
public class AttributeProp extends javax.swing.JPanel {

    private static final long serialVersionUID = 4808266192954985430L;
    private final AttributeDraft attr;
    private final ImporterUI importerUI;
    private static Logger LOG = LoggerFactory.getLogger(AttributeProp.class);

    /**
     * Creates new form AttributeProp
     */
    public AttributeProp(AttributeDraft atrd, ImporterUI importerUI) {
        this.attr = atrd;
        this.importerUI = importerUI;
        initComponents();
        setType(atrd.getJavaType());
        setRole(atrd.getRole().toString());
        setAttrName(atrd.getName());
    }

    public final void setAttrName(String name) {
        tfName.setText(name);
    }

    public final void setType(Class<?> type) {
        cbType.setSelectedItem(classToString(type));
    }

    public final void setRole(String role) {
        cbRole.setSelectedItem(role.toLowerCase());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cbType = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        cbRole = new javax.swing.JComboBox();
        chckImport = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(AttributeProp.class, "AttributeProp.jLabel1.text")); // NOI18N

        tfName.setText(org.openide.util.NbBundle.getMessage(AttributeProp.class, "AttributeProp.tfName.text")); // NOI18N
        tfName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfNameActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(AttributeProp.class, "AttributeProp.jLabel2.text")); // NOI18N

        cbType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "double", "int", "float", "long", "string" }));
        cbType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbTypeItemStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(AttributeProp.class, "AttributeProp.jLabel3.text")); // NOI18N

        cbRole.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "input", "meta", "label", "class", "id" }));
        cbRole.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbRoleItemStateChanged(evt);
            }
        });

        chckImport.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(chckImport, org.openide.util.NbBundle.getMessage(AttributeProp.class, "AttributeProp.chckImport.text")); // NOI18N
        chckImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chckImportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chckImport)
                            .addComponent(cbRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(chckImport)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tfNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfNameActionPerformed
        attr.setName(tfName.getName());
        //TODO: call reload
        importerUI.fireImporterChanged();
    }//GEN-LAST:event_tfNameActionPerformed

    private void chckImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chckImportActionPerformed
        attr.setSkipped(chckImport.isSelected());
        importerUI.fireImporterChanged();
    }//GEN-LAST:event_chckImportActionPerformed

    private void cbTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbTypeItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            String item = (String) cbType.getSelectedItem();
            Class<?> type = stringToClass(item);
            if (type != attr.getJavaType()) {
                attr.setJavaType(type);
                LOG.info("attr {} type changed to {}", attr.getName(), type);
                importerUI.fireImporterChanged();
            }
        }

    }//GEN-LAST:event_cbTypeItemStateChanged

    private void cbRoleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbRoleItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            String strRole = (String) cbRole.getSelectedItem();
            AttributeRole role = BasicAttrRole.valueOf(strRole.toUpperCase());
            if (attr.getRole() != role) {
                attr.setRole(role);
                LOG.info("attr {} role changed to {}", attr.getName(), role.toString());
                importerUI.fireImporterChanged();
            }
        }
    }//GEN-LAST:event_cbRoleItemStateChanged

    protected Class<?> stringToClass(String type) {
        switch (type) {
            case "double":
                return Double.class;
            case "float":
                return Float.class;
            case "int":
            case "integer":
                return Integer.class;
            case "long":
                return Long.class;
            case "string":
                return String.class;
            default:
                break;
        }
        throw new RuntimeException("type '" + type + "' is not supported");
    }

    protected String classToString(Class<?> type) {
        if (type == Double.class) {
            return "double";
        } else if (type.equals(Integer.class)) {
            return "int";
        } else if (type.equals(Float.class)) {
            return "float";
        } else if (type.equals(Long.class)) {
            return "long";
        } else if (type.equals(String.class)) {
            return "string";
        }
        throw new RuntimeException("type '" + type + "' is not supported");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbRole;
    private javax.swing.JComboBox cbType;
    private javax.swing.JCheckBox chckImport;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField tfName;
    // End of variables declaration//GEN-END:variables
}
