/*
 * Copyright (C) 2011-2017 clueminer.org
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.clueminer.meta.view;

import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.util.Collection;
import javax.swing.SwingUtilities;
import org.clueminer.clustering.api.Clustering;
import org.clueminer.dataset.api.Dataset;
import org.clueminer.dataset.api.Instance;
import org.clueminer.meta.api.MetaStorageFactory;
import org.clueminer.project.api.Project;
import org.clueminer.project.api.ProjectController;
import org.clueminer.project.api.Workspace;
import org.clueminer.project.api.WorkspaceListener;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Top component which displays data from meta-database
 */
@ConvertAsProperties(
        dtd = "-//org.clueminer.meta.view//MetaViewer//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "MetaViewerTopComponent",
        iconBase = "org/clueminer/meta/view/meta16.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "leftSlidingSide", openAtStartup = true)
@ActionID(category = "Window", id = "org.clueminer.meta.view.MetaViewerTopComponent")
@ActionReference(path = "Menu/Window" /* , position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_MetaViewerAction",
        preferredID = "MetaViewerTopComponent"
)
@Messages({
    "CTL_MetaViewerAction=MetaViewer",
    "CTL_MetaViewerTopComponent=Meta-data viewer",
    "HINT_MetaViewerTopComponent=Metrics stored in Meta DB"
})
public final class MetaViewerTopComponent extends TopComponent implements LookupListener {

    private static final long serialVersionUID = -950662751709594103L;
    private final MetaPanel panel;
    private Lookup.Result<Clustering> result = null;
    private static final Logger LOG = LoggerFactory.getLogger(MetaViewerTopComponent.class);

    public MetaViewerTopComponent() {
        initComponents();
        setName(Bundle.CTL_MetaViewerTopComponent());
        setToolTipText(Bundle.HINT_MetaViewerTopComponent());
        panel = new MetaPanel();
        add(panel, new GridBagConstraints(0, 0, 1, 1, 1.0, 1.0, GridBagConstraints.NORTHWEST, GridBagConstraints.BOTH, new Insets(0, 0, 0, 0), 0, 0));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.GridBagLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        MetaStorageFactory mf = MetaStorageFactory.getInstance();
        panel.setStorage(mf.getDefault());

        final MetaViewerTopComponent that = this;

        ProjectController pc = Lookup.getDefault().lookup(ProjectController.class);
        pc.addWorkspaceListener(new WorkspaceListener() {
            @Override
            public void initialize(Workspace workspace) {
                LOG.debug("meta-panel initialized");
            }

            @Override
            public void select(final Workspace workspace) {
                LOG.debug("meta-panel selected");

                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {

                        Dataset<? extends Instance> dataset = workspace.getLookup().lookup(Dataset.class);
                        if (dataset != null) {
                            panel.updateDataset(dataset);
                        }
                    }
                });
            }

            @Override
            public void unselect(Workspace workspace) {
                if (result != null) {
                    //   result.removeLookupListener(parent);
                }
            }

            @Override
            public void close(Workspace workspace) {
            }

            @Override
            public void disable() {

            }

            @Override
            public void projectActivated(Project proj) {
                result = proj.getLookup().lookupResult(Clustering.class);
                result.addLookupListener(that);
            }
        });

    }

    @Override
    public void componentClosed() {
        if (result != null) {
            result.removeLookupListener(this);
        }
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent ev) {

        if (result != null) {
            final Collection<? extends Clustering> res = result.allInstances();
            if (res != null) {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        panel.setReferenceClustering(res);
                    }
                });
            }

        }
    }
}
