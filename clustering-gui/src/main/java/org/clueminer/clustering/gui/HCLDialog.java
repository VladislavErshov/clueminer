package org.clueminer.clustering.gui;

import java.util.List;
import javax.swing.DefaultComboBoxModel;
import org.clueminer.approximation.api.DataTransformFactory;
import org.clueminer.clustering.algorithm.HCL;
import org.clueminer.clustering.api.ClusterEvaluatorFactory;
import org.clueminer.clustering.api.ClusteringAlgorithm;
import org.clueminer.distance.api.AbstractDistance;
import org.clueminer.distance.api.DistanceFactory;
import org.clueminer.std.StandardisationFactory;
import org.clueminer.utils.AlgorithmParameters;
import org.openide.util.lookup.ServiceProvider;

/**
 *
 * @author Tomas Barton
 */
@ServiceProvider(service = ClusteringDialog.class)
public class HCLDialog extends ClusteringDialog {

    private static final long serialVersionUID = -5755827346014535345L;
    private AlgorithmParameters params;
    private ClusterAnalysis parent;
    private ClusteringAlgorithm algorihm;

    /**
     * Creates new form HCLDialog
     */
    public HCLDialog() {
        algorihm = new HCL();
        initComponents();
        setDefaults();
    }

    @Override
    public String getName() {
        return algorihm.getName();
    }

    private void setDefaults() {
        comboDistance.setSelectedItem("Euclidean");
        comboStandardisation.setSelectedItem("Min-Max");
        comboTransform.setSelectedItem("-- no transformation --");
    }

    private String[] initDistance() {
        DistanceFactory df = DistanceFactory.getDefault();
        List<String> list = df.getProviders();
        String[] res = new String[list.size()];
        int i = 0;
        for (String s : list) {
            res[i++] = s;
        }
        return res;
    }

    private String[] initStandardisation() {
        StandardisationFactory sf = StandardisationFactory.getDefault();
        List<String> list = sf.getProviders();
        String[] res = new String[list.size()];
        int i = 0;
        for (String s : list) {
            res[i++] = s;
        }
        return res;
    }

    private String[] initCutoff() {
        ClusterEvaluatorFactory ef = ClusterEvaluatorFactory.getDefault();
        List<String> list = ef.getProviders();
        list.add("-- naive --");
        String[] res = new String[list.size()];
        int i = 0;
        for (String s : list) {
            res[i++] = s;
        }
        return res;
    }

    private String[] initTransform() {
        DataTransformFactory df = DataTransformFactory.getDefault();
        List<String> list = df.getProviders();
        list.add("-- no transformation --");
        String[] res = new String[list.size()];
        int i = 0;
        for (String s : list) {
            res[i++] = s;
        }
        return res;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputGroup = new javax.swing.ButtonGroup();
        linkageGroup = new javax.swing.ButtonGroup();
        lbStandard = new javax.swing.JLabel();
        comboStandardisation = new javax.swing.JComboBox();
        lbDistanceFunction = new javax.swing.JLabel();
        comboDistance = new javax.swing.JComboBox();
        lbLinkage = new javax.swing.JLabel();
        radioLinkageSingle = new javax.swing.JRadioButton();
        radioLinkageComplete = new javax.swing.JRadioButton();
        radioLinkageAverage = new javax.swing.JRadioButton();
        lbDistanceFactor = new javax.swing.JLabel();
        spnDistanceFactor = new javax.swing.JSpinner();
        lbCutoffMethod = new javax.swing.JLabel();
        comboCutoff = new javax.swing.JComboBox();
        chkBoxLogScale = new javax.swing.JCheckBox();
        chckRows = new javax.swing.JCheckBox();
        chckColumns = new javax.swing.JCheckBox();
        lbTransform = new javax.swing.JLabel();
        comboTransform = new javax.swing.JComboBox();

        lbStandard.setText(org.openide.util.NbBundle.getMessage(HCLDialog.class, "HCLDialog.lbStandard.text_1")); // NOI18N

        comboStandardisation.setModel(new DefaultComboBoxModel(initStandardisation()));

        lbDistanceFunction.setText(org.openide.util.NbBundle.getMessage(HCLDialog.class, "HCLDialog.lbDistanceFunction.text_1")); // NOI18N

        comboDistance.setModel(new DefaultComboBoxModel(initDistance()));

        lbLinkage.setText(org.openide.util.NbBundle.getMessage(HCLDialog.class, "HCLDialog.lbLinkage.text")); // NOI18N

        linkageGroup.add(radioLinkageSingle);
        radioLinkageSingle.setText(org.openide.util.NbBundle.getMessage(HCLDialog.class, "HCLDialog.radioLinkageSingle.text")); // NOI18N

        linkageGroup.add(radioLinkageComplete);
        radioLinkageComplete.setSelected(true);
        radioLinkageComplete.setText(org.openide.util.NbBundle.getMessage(HCLDialog.class, "HCLDialog.radioLinkageComplete.text")); // NOI18N

        linkageGroup.add(radioLinkageAverage);
        radioLinkageAverage.setText(org.openide.util.NbBundle.getMessage(HCLDialog.class, "HCLDialog.radioLinkageAverage.text")); // NOI18N

        lbDistanceFactor.setText(org.openide.util.NbBundle.getMessage(HCLDialog.class, "HCLDialog.lbDistanceFactor.text")); // NOI18N

        spnDistanceFactor.setModel(new javax.swing.SpinnerNumberModel(1, -10, 10, 1));

        lbCutoffMethod.setText(org.openide.util.NbBundle.getMessage(HCLDialog.class, "HCLDialog.lbCutoffMethod.text_1")); // NOI18N

        comboCutoff.setModel(new DefaultComboBoxModel(initCutoff()));

        chkBoxLogScale.setText(org.openide.util.NbBundle.getMessage(HCLDialog.class, "HCLDialog.chkBoxLogScale.text")); // NOI18N

        chckRows.setSelected(true);
        chckRows.setText(org.openide.util.NbBundle.getMessage(HCLDialog.class, "HCLDialog.chckRows.text")); // NOI18N

        chckColumns.setSelected(true);
        chckColumns.setText(org.openide.util.NbBundle.getMessage(HCLDialog.class, "HCLDialog.chckColumns.text")); // NOI18N

        lbTransform.setText(org.openide.util.NbBundle.getMessage(HCLDialog.class, "HCLDialog.lbTransform.text_1")); // NOI18N

        comboTransform.setModel(new DefaultComboBoxModel(initTransform()));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbStandard)
                                    .addComponent(lbDistanceFunction)
                                    .addComponent(lbDistanceFactor))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(spnDistanceFactor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(148, 148, 148)
                                .addComponent(chckColumns))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(chkBoxLogScale))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(chckRows))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbLinkage)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(radioLinkageComplete)
                                    .addComponent(radioLinkageSingle)
                                    .addComponent(radioLinkageAverage)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbCutoffMethod)
                                .addGap(42, 42, 42)
                                .addComponent(comboCutoff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lbTransform)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboStandardisation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboTransform, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboDistance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(213, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbTransform)
                    .addComponent(comboTransform, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbStandard)
                    .addComponent(comboStandardisation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbDistanceFunction)
                    .addComponent(comboDistance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbDistanceFactor)
                    .addComponent(spnDistanceFactor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbLinkage)
                    .addComponent(radioLinkageSingle))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioLinkageComplete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioLinkageAverage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbCutoffMethod)
                    .addComponent(comboCutoff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chckRows)
                    .addComponent(chckColumns))
                .addGap(18, 18, 18)
                .addComponent(chkBoxLogScale)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chckColumns;
    private javax.swing.JCheckBox chckRows;
    private javax.swing.JCheckBox chkBoxLogScale;
    private javax.swing.JComboBox comboCutoff;
    private javax.swing.JComboBox comboDistance;
    private javax.swing.JComboBox comboStandardisation;
    private javax.swing.JComboBox comboTransform;
    private javax.swing.ButtonGroup inputGroup;
    private javax.swing.JLabel lbCutoffMethod;
    private javax.swing.JLabel lbDistanceFactor;
    private javax.swing.JLabel lbDistanceFunction;
    private javax.swing.JLabel lbLinkage;
    private javax.swing.JLabel lbStandard;
    private javax.swing.JLabel lbTransform;
    private javax.swing.ButtonGroup linkageGroup;
    private javax.swing.JRadioButton radioLinkageAverage;
    private javax.swing.JRadioButton radioLinkageComplete;
    private javax.swing.JRadioButton radioLinkageSingle;
    private javax.swing.JSpinner spnDistanceFactor;
    // End of variables declaration//GEN-END:variables

    @Override
    public AlgorithmParameters getParams() {
        params = new AlgorithmParameters();
        // alg name
        params.setProperty("name", "HCL");
        // alg type
        params.setProperty("alg-type", "cluster");
        // output class
        params.setProperty("output-class", "single-output");
        params.setProperty("distance-factor", String.valueOf(spnDistanceFactor.getValue()));
        params.setProperty("hcl-distance-absolute", String.valueOf(true));

        DistanceFactory df = DistanceFactory.getDefault();
        AbstractDistance func = df.getProvider((String) comboDistance.getSelectedItem());
        algorihm.setDistanceFunction(func);

        String standard = (String) comboStandardisation.getSelectedItem();
        params.setProperty("std", standard);

        params.setProperty("dataset", (String) comboTransform.getSelectedItem() );

        /**
         * 0 for ALC method, 1 for CLC or -1 otherwise
         */
        int linkage = 0;
        if (radioLinkageAverage.isSelected()) {
            linkage = 0;
        } else if (radioLinkageComplete.isSelected()) {
            linkage = 1;
        } else if (radioLinkageSingle.isSelected()) {
            linkage = -1;
        }
        params.setProperty("method-linkage", String.valueOf(linkage));

        params.setProperty("calculate-experiments", String.valueOf(true));

        params.setProperty("optimize-rows-ordering", String.valueOf(true));

        //Clustering by Samples
        params.setProperty("calculate-rows", String.valueOf(chckRows.isSelected()));
        params.setProperty("calculate-columns", String.valueOf(chckColumns.isSelected()));
        //data.addParam("calculate-genes", String.valueOf(false));
        params.setProperty("optimize-cols-ordering", String.valueOf(true));

        params.setProperty("optimize-sample-ordering", String.valueOf(true));

        params.setProperty("cutoff", comboCutoff.getSelectedItem().toString());
        params.setProperty("log-scale", String.valueOf(chkBoxLogScale.isSelected()));

        //Clustering by Samples
            /*
         * data.addParam("optimize-sample-ordering", String.valueOf(false));
         *
         * data.addParam("optimize-sample-ordering", String.valueOf(true));
         */
        return params;
    }

    @Override
    public void setParent(ClusterAnalysis clust) {
        parent = clust;
    }

    @Override
    public ClusteringAlgorithm getAlgorithm() {
        return algorihm;
    }
}
