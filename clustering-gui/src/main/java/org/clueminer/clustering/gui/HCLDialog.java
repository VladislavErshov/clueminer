package org.clueminer.clustering.gui;

import java.util.Enumeration;
import java.util.List;
import java.util.prefs.Preferences;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import org.clueminer.approximation.api.DataTransformFactory;
import org.clueminer.clustering.algorithm.HCL;
import org.clueminer.clustering.api.ClusterEvaluatorFactory;
import org.clueminer.clustering.api.ClusteringAlgorithm;
import org.clueminer.distance.api.AbstractDistance;
import org.clueminer.distance.api.DistanceFactory;
import org.clueminer.std.StandardisationFactory;
import org.openide.util.NbPreferences;
import org.openide.util.lookup.ServiceProvider;

/**
 *
 * @author Tomas Barton
 */
@ServiceProvider(service = ClusteringDialog.class)
public class HCLDialog extends ClusteringDialog {

    private static final long serialVersionUID = -5755827346014535345L;
    private Preferences params;
    private ClusterAnalysis parent;
    private final ClusteringAlgorithm algorihm;

    /**
     * Creates new form HCLDialog
     */
    public HCLDialog() {
        algorihm = new HCL();
        initComponents();
        setDefaults();
    }

    @Override
    public String getName() {
        return algorihm.getName();
    }

    private void setDefaults() {
        initTransform();
        comboDistance.setSelectedItem("Euclidean");
        comboStandardisation.setSelectedItem("Min-Max");
    }

    private String[] initDistance() {
        DistanceFactory df = DistanceFactory.getDefault();
        List<String> list = df.getProviders();
        String[] res = new String[list.size()];
        int i = 0;
        for (String s : list) {
            res[i++] = s;
        }
        return res;
    }

    private String[] initStandardisation() {
        StandardisationFactory sf = StandardisationFactory.getDefault();
        List<String> list = sf.getProviders();
        String[] res = new String[list.size()];
        int i = 0;
        for (String s : list) {
            res[i++] = s;
        }
        return res;
    }

    private String[] initCutoff() {
        ClusterEvaluatorFactory ef = ClusterEvaluatorFactory.getDefault();
        List<String> list = ef.getProviders();
        list.add("-- naive --");
        String[] res = new String[list.size()];
        int i = 0;
        for (String s : list) {
            res[i++] = s;
        }
        return res;
    }

    private void initTransform() {
        DataTransformFactory df = DataTransformFactory.getDefault();
        List<String> list = df.getProviders();
        DefaultListModel lm = (DefaultListModel) lstAvailTrans.getModel();

        for (String s : list) {
            lm.addElement(s);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputGroup = new javax.swing.ButtonGroup();
        linkageGroup = new javax.swing.ButtonGroup();
        lbStandard = new javax.swing.JLabel();
        comboStandardisation = new javax.swing.JComboBox();
        lbDistanceFunction = new javax.swing.JLabel();
        comboDistance = new javax.swing.JComboBox();
        lbLinkage = new javax.swing.JLabel();
        radioLinkageSingle = new javax.swing.JRadioButton();
        radioLinkageComplete = new javax.swing.JRadioButton();
        radioLinkageAverage = new javax.swing.JRadioButton();
        lbDistanceFactor = new javax.swing.JLabel();
        spnDistanceFactor = new javax.swing.JSpinner();
        lbCutoffMethod = new javax.swing.JLabel();
        comboCutoff = new javax.swing.JComboBox();
        chkBoxLogScale = new javax.swing.JCheckBox();
        chckRows = new javax.swing.JCheckBox();
        chckColumns = new javax.swing.JCheckBox();
        lbTransform = new javax.swing.JLabel();
        chckRowOrder = new javax.swing.JCheckBox();
        chckColumnsOrder = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstAvailTrans = new JList(new DefaultListModel());
        btnAddTrans = new javax.swing.JButton();
        btnRemoveTrans = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstApplyTrans = new JList(new DefaultListModel());
        jLabel1 = new javax.swing.JLabel();

        lbStandard.setText(org.openide.util.NbBundle.getMessage(HCLDialog.class, "HCLDialog.lbStandard.text_1")); // NOI18N

        comboStandardisation.setModel(new DefaultComboBoxModel(initStandardisation()));

        lbDistanceFunction.setText(org.openide.util.NbBundle.getMessage(HCLDialog.class, "HCLDialog.lbDistanceFunction.text_1")); // NOI18N

        comboDistance.setModel(new DefaultComboBoxModel(initDistance()));

        lbLinkage.setText(org.openide.util.NbBundle.getMessage(HCLDialog.class, "HCLDialog.lbLinkage.text")); // NOI18N

        linkageGroup.add(radioLinkageSingle);
        radioLinkageSingle.setText(org.openide.util.NbBundle.getMessage(HCLDialog.class, "HCLDialog.radioLinkageSingle.text")); // NOI18N

        linkageGroup.add(radioLinkageComplete);
        radioLinkageComplete.setSelected(true);
        radioLinkageComplete.setText(org.openide.util.NbBundle.getMessage(HCLDialog.class, "HCLDialog.radioLinkageComplete.text")); // NOI18N

        linkageGroup.add(radioLinkageAverage);
        radioLinkageAverage.setText(org.openide.util.NbBundle.getMessage(HCLDialog.class, "HCLDialog.radioLinkageAverage.text")); // NOI18N

        lbDistanceFactor.setText(org.openide.util.NbBundle.getMessage(HCLDialog.class, "HCLDialog.lbDistanceFactor.text")); // NOI18N

        spnDistanceFactor.setModel(new javax.swing.SpinnerNumberModel(1, -10, 10, 1));

        lbCutoffMethod.setText(org.openide.util.NbBundle.getMessage(HCLDialog.class, "HCLDialog.lbCutoffMethod.text_1")); // NOI18N

        comboCutoff.setModel(new DefaultComboBoxModel(initCutoff()));

        chkBoxLogScale.setText(org.openide.util.NbBundle.getMessage(HCLDialog.class, "HCLDialog.chkBoxLogScale.text")); // NOI18N

        chckRows.setSelected(true);
        chckRows.setText(org.openide.util.NbBundle.getMessage(HCLDialog.class, "HCLDialog.chckRows.text")); // NOI18N

        chckColumns.setSelected(true);
        chckColumns.setText(org.openide.util.NbBundle.getMessage(HCLDialog.class, "HCLDialog.chckColumns.text")); // NOI18N

        lbTransform.setText(org.openide.util.NbBundle.getMessage(HCLDialog.class, "HCLDialog.lbTransform.text_1")); // NOI18N

        chckRowOrder.setText(org.openide.util.NbBundle.getMessage(HCLDialog.class, "HCLDialog.chckRowOrder.text")); // NOI18N

        chckColumnsOrder.setText(org.openide.util.NbBundle.getMessage(HCLDialog.class, "HCLDialog.chckColumnsOrder.text")); // NOI18N

        lstAvailTrans.setModel(new DefaultListModel());
        lstAvailTrans.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(lstAvailTrans);

        btnAddTrans.setText(org.openide.util.NbBundle.getMessage(HCLDialog.class, "HCLDialog.btnAddTrans.text")); // NOI18N
        btnAddTrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTransActionPerformed(evt);
            }
        });

        btnRemoveTrans.setText(org.openide.util.NbBundle.getMessage(HCLDialog.class, "HCLDialog.btnRemoveTrans.text")); // NOI18N
        btnRemoveTrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveTransActionPerformed(evt);
            }
        });

        lstApplyTrans.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(lstApplyTrans);

        jLabel1.setText(org.openide.util.NbBundle.getMessage(HCLDialog.class, "HCLDialog.jLabel1.text_1")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbLinkage)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(radioLinkageComplete)
                                    .addComponent(radioLinkageSingle))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(lbDistanceFunction)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(comboDistance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(lbStandard)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(comboStandardisation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(chckRows)
                                                    .addComponent(chckRowOrder)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(lbDistanceFactor)
                                                        .addGap(31, 31, 31)
                                                        .addComponent(spnDistanceFactor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                        .addGap(54, 54, 54))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(radioLinkageAverage)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chckColumns)
                                    .addComponent(chckColumnsOrder)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(btnAddTrans)
                                                    .addComponent(btnRemoveTrans)))
                                            .addComponent(lbTransform)
                                            .addComponent(chkBoxLogScale))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                                .addContainerGap(28, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbCutoffMethod)
                        .addGap(42, 42, 42)
                        .addComponent(comboCutoff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkBoxLogScale)
                    .addComponent(lbStandard)
                    .addComponent(comboStandardisation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(btnAddTrans)
                                .addGap(10, 10, 10)
                                .addComponent(btnRemoveTrans))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbDistanceFunction)
                                    .addComponent(comboDistance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbDistanceFactor)
                                    .addComponent(spnDistanceFactor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbLinkage)
                            .addComponent(radioLinkageSingle))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radioLinkageComplete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radioLinkageAverage))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addGap(4, 4, 4)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lbTransform)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbCutoffMethod)
                    .addComponent(comboCutoff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chckRows)
                    .addComponent(chckColumns))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chckRowOrder)
                    .addComponent(chckColumnsOrder))
                .addGap(22, 22, 22))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddTransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTransActionPerformed
        DefaultListModel lmFrom = (DefaultListModel) lstAvailTrans.getModel();
        DefaultListModel lmTo = (DefaultListModel) lstApplyTrans.getModel();

        if (lmFrom.size() > 0) {
            int index = lstAvailTrans.getSelectedIndex();
            if (index > -1) {
                Object item = lstAvailTrans.getSelectedValue();
                lmFrom.removeElementAt(lstAvailTrans.getSelectedIndex());
                lmTo.addElement(item);
            }
        }
    }//GEN-LAST:event_btnAddTransActionPerformed

    private void btnRemoveTransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveTransActionPerformed
        DefaultListModel lmFrom = (DefaultListModel) lstAvailTrans.getModel();
        DefaultListModel lmTo = (DefaultListModel) lstApplyTrans.getModel();

        if (lmTo.size() > 0) {
            int index = lstApplyTrans.getSelectedIndex();
            if (index > -1) {
                Object item = lstApplyTrans.getSelectedValue();
                lmTo.removeElementAt(lstApplyTrans.getSelectedIndex());
                lmFrom.addElement(item);
            }
        }
    }//GEN-LAST:event_btnRemoveTransActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddTrans;
    private javax.swing.JButton btnRemoveTrans;
    private javax.swing.JCheckBox chckColumns;
    private javax.swing.JCheckBox chckColumnsOrder;
    private javax.swing.JCheckBox chckRowOrder;
    private javax.swing.JCheckBox chckRows;
    private javax.swing.JCheckBox chkBoxLogScale;
    private javax.swing.JComboBox comboCutoff;
    private javax.swing.JComboBox comboDistance;
    private javax.swing.JComboBox comboStandardisation;
    private javax.swing.ButtonGroup inputGroup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbCutoffMethod;
    private javax.swing.JLabel lbDistanceFactor;
    private javax.swing.JLabel lbDistanceFunction;
    private javax.swing.JLabel lbLinkage;
    private javax.swing.JLabel lbStandard;
    private javax.swing.JLabel lbTransform;
    private javax.swing.ButtonGroup linkageGroup;
    private javax.swing.JList lstApplyTrans;
    private javax.swing.JList lstAvailTrans;
    private javax.swing.JRadioButton radioLinkageAverage;
    private javax.swing.JRadioButton radioLinkageComplete;
    private javax.swing.JRadioButton radioLinkageSingle;
    private javax.swing.JSpinner spnDistanceFactor;
    // End of variables declaration//GEN-END:variables

    @Override
    public Preferences getParams() {
        params = NbPreferences.forModule(HCLDialog.class);
        // alg name
        params.put("name", "HCL");
        // alg type
        params.put("alg-type", "cluster");
        // output class
        params.put("output-class", "single-output");
        params.putInt("distance-factor", (Integer) spnDistanceFactor.getValue());
        params.putBoolean("hcl-distance-absolute", true);

        DistanceFactory df = DistanceFactory.getDefault();
        AbstractDistance func = df.getProvider((String) comboDistance.getSelectedItem());
        algorihm.setDistanceFunction(func);

        String standard = (String) comboStandardisation.getSelectedItem();
        params.put("std", standard);


        DefaultListModel lmTo = (DefaultListModel) lstApplyTrans.getModel();

        Enumeration iter = lmTo.elements();
        int i = 0;
        StringBuilder trans = new StringBuilder();
        while (iter.hasMoreElements()) {
            if (i > 0) {
                trans.append(",");
            }
            trans.append(iter.nextElement());
            i++;
        }
        params.put("transformations", trans.toString());

        /**
         * 0 for ALC method, 1 for CLC or -1 otherwise
         */
        int linkage = 0;
        if (radioLinkageAverage.isSelected()) {
            linkage = 0;
        } else if (radioLinkageComplete.isSelected()) {
            linkage = 1;
        } else if (radioLinkageSingle.isSelected()) {
            linkage = -1;
        }
        params.putInt("method-linkage", linkage);

        params.putBoolean("calculate-experiments", true);

        params.putBoolean("optimize-rows-ordering", chckRowOrder.isSelected());

        //Clustering by Samples
        params.putBoolean("calculate-rows", chckRows.isSelected());
        params.putBoolean("calculate-columns", chckColumns.isSelected());
        params.putBoolean("optimize-cols-ordering", chckColumns.isSelected());

        params.putBoolean("optimize-sample-ordering", false);

        params.put("cutoff", comboCutoff.getSelectedItem().toString());
        params.putBoolean("log-scale", chkBoxLogScale.isSelected());

        //Clustering by Samples
            /*
         * data.addParam("optimize-sample-ordering", String.valueOf(false));
         *
         * data.addParam("optimize-sample-ordering", String.valueOf(true));
         */
        return params;
    }

    @Override
    public void setParent(ClusterAnalysis clust) {
        parent = clust;
    }

    @Override
    public ClusteringAlgorithm getAlgorithm() {
        return algorihm;
    }
}
