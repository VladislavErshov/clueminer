package org.clueminer.processor.ui;

import javax.swing.JPanel;
import javax.swing.event.EventListenerList;
import org.clueminer.importer.impl.CsvImporter;
import org.clueminer.spi.ImportListener;
import org.clueminer.spi.Importer;
import org.clueminer.spi.ImporterUI;
import org.openide.util.NbBundle;
import org.openide.util.lookup.ServiceProvider;

/**
 *
 * @author deric
 */
@ServiceProvider(service = ImporterUI.class)
public class CsvImporterUI extends javax.swing.JPanel implements ImporterUI {

    private static final long serialVersionUID = -1117775885334856126L;
    private CsvImporter importer;
    private final transient EventListenerList importListeners = new EventListenerList();

    /**
     * Creates new form CsvImporterUI
     */
    public CsvImporterUI() {
        initComponents();
    }

    @Override
    public void setup(Importer importer) {
        this.importer = (CsvImporter) importer;

    }

    @Override
    public JPanel getPanel() {
        return this;
    }

    @Override
    public void unsetup(boolean update) {
        //
    }

    @Override
    public String getDisplayName() {
        return NbBundle.getMessage(getClass(), "CsvImporterUI.displayName");
    }

    @Override
    public boolean isUIForImporter(Importer importer) {
        return importer instanceof CsvImporter;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbSeparator = new javax.swing.JLabel();
        comboSeparator = new javax.swing.JComboBox();
        chckHeader = new javax.swing.JCheckBox();
        chckQuotation = new javax.swing.JCheckBox();
        lbNumType = new javax.swing.JLabel();
        cbDefaultType = new javax.swing.JComboBox();

        org.openide.awt.Mnemonics.setLocalizedText(lbSeparator, org.openide.util.NbBundle.getMessage(CsvImporterUI.class, "CsvImporterUI.lbSeparator.text")); // NOI18N

        comboSeparator.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ",", ";", "<tab>", "<space>", "|" }));
        comboSeparator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSeparatorActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(chckHeader, org.openide.util.NbBundle.getMessage(CsvImporterUI.class, "CsvImporterUI.chckHeader.text")); // NOI18N
        chckHeader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chckHeaderActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(chckQuotation, org.openide.util.NbBundle.getMessage(CsvImporterUI.class, "CsvImporterUI.chckQuotation.text")); // NOI18N
        chckQuotation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chckQuotationActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(lbNumType, org.openide.util.NbBundle.getMessage(CsvImporterUI.class, "CsvImporterUI.lbNumType.text")); // NOI18N

        cbDefaultType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "double", "float", "int", "long" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chckHeader)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbSeparator)
                        .addGap(27, 27, 27)
                        .addComponent(comboSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(chckQuotation)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbNumType)
                        .addGap(3, 3, 3)
                        .addComponent(cbDefaultType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbSeparator)
                    .addComponent(comboSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbNumType)
                    .addComponent(cbDefaultType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(chckHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chckQuotation)
                .addContainerGap(44, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void comboSeparatorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSeparatorActionPerformed
        String sep = (String) comboSeparator.getSelectedItem();
        char separator = sep.charAt(0);
        importer.setSeparator(separator);
        fireImporterChanged();
    }//GEN-LAST:event_comboSeparatorActionPerformed

    private void chckHeaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chckHeaderActionPerformed
        importer.setHasHeader(chckHeader.isSelected());
        fireImporterChanged();
    }//GEN-LAST:event_chckHeaderActionPerformed

    private void chckQuotationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chckQuotationActionPerformed
        importer.setIgnoreQuotations(chckQuotation.isSelected());
        fireImporterChanged();
    }//GEN-LAST:event_chckQuotationActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbDefaultType;
    private javax.swing.JCheckBox chckHeader;
    private javax.swing.JCheckBox chckQuotation;
    private javax.swing.JComboBox comboSeparator;
    private javax.swing.JLabel lbNumType;
    private javax.swing.JLabel lbSeparator;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addListener(ImportListener listener) {
        importListeners.add(ImportListener.class, listener);
    }

    @Override
    public void removeListener(ImportListener listener) {
        importListeners.remove(ImportListener.class, listener);
    }

    @Override
    public void fireImporterChanged(){
        importer.reload();
        for (ImportListener im : importListeners.getListeners(ImportListener.class)) {
            im.importerChanged(importer, this);
        }
    }

}
