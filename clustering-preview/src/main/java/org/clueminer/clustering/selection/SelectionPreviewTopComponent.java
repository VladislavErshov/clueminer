package org.clueminer.clustering.selection;

import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.util.Collection;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import org.clueminer.dataset.api.Dataset;
import org.clueminer.dataset.api.Instance;
import org.clueminer.project.api.Project;
import org.clueminer.project.api.ProjectController;
import org.clueminer.project.api.Workspace;
import org.clueminer.project.api.WorkspaceListener;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.clueminer.clustering.selection//SelectionPreview//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "SelectionPreviewTopComponent",
        iconBase = "org/clueminer/clustering/preview/preview-icon-16.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "leftSlidingSide", openAtStartup = false)
@ActionID(category = "Window", id = "org.clueminer.clustering.selection.SelectionPreviewTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_SelectionPreviewAction",
        preferredID = "SelectionPreviewTopComponent"
)
@Messages({
    "CTL_SelectionPreviewAction=SelectionPreview",
    "CTL_SelectionPreviewTopComponent=SelectionPreview Window",
    "HINT_SelectionPreviewTopComponent=This is a SelectionPreview window"
})
public final class SelectionPreviewTopComponent extends TopComponent implements LookupListener {

    private Lookup.Result<Dataset> result = null;
    private final SelectionFrame frame;
    private static final Logger logger = Logger.getLogger(SelectionPreviewTopComponent.class.getName());
    protected static Project project;

    public SelectionPreviewTopComponent() {
        initComponents();
        setName(Bundle.CTL_SelectionPreviewTopComponent());
        setToolTipText(Bundle.HINT_SelectionPreviewTopComponent());
        frame = new SelectionFrame();
        add(frame, new GridBagConstraints(0, 0, 1, 1, 1.0, 1.0, GridBagConstraints.NORTHWEST, GridBagConstraints.BOTH, new Insets(0, 0, 0, 0), 0, 0));
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.GridBagLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        ProjectController pc = Lookup.getDefault().lookup(ProjectController.class);
        pc.addWorkspaceListener(new WorkspaceListener() {

            @Override
            public void initialize(Workspace workspace) {
                logger.log(Level.INFO, "panel initialized");
            }

            @Override
            public void select(Workspace workspace) {
                Dataset<Instance> dataset = workspace.getLookup().lookup(Dataset.class);
                if (dataset != null) {
                    System.out.println("well map");
                    System.out.println("dataset size = " + dataset.size());
                    for (Instance inst : dataset) {
                        System.out.println("inst: " + inst.toString());
                    }
                }

            }

            @Override
            public void unselect(Workspace workspace) {
                //
            }

            @Override
            public void close(Workspace workspace) {
                //
            }

            @Override
            public void disable() {
                //
            }

            @Override
            public void projectActivated(Project proj) {
                project = proj;
                projectChanged();
            }

        });

        result = Utilities.actionsGlobalContext().lookupResult(Dataset.class);
        result.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        if (result != null) {
            result.removeLookupListener(this);
        }
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent le) {
        if (result != null) {
            logger.log(Level.INFO, "got lookup result {0}", result.allInstances().size());
            Collection<? extends Dataset> allDatasets = result.allInstances();
            for (Dataset<? extends Instance> d : allDatasets) {
                updateDataset(d);
            }
        }
    }

    private void updateDataset(Dataset<? extends Instance> d) {
        frame.setDataset(d);
    }

    protected void projectChanged() {
        final Dataset<? extends Instance> data = project.getLookup().lookup(Dataset.class);

        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                updateDataset(data);
            }
        });

    }
}
